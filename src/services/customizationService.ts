
import { supabase } from "@/integrations/supabase/client";
import { MerchantCustomization, MerchantCustomizationModel } from "@/types";
import { toMerchantCustomizationModel, toMerchantCustomizationEntity } from "@/utils/modelConversions";

// Example customization service

/**
 * Gets the customization settings for a merchant
 * @param merchantId The merchant ID
 * @returns The merchant's customization settings
 */
export async function getMerchantCustomization(
  merchantId: string
): Promise<MerchantCustomizationModel | null> {
  try {
    const { data, error } = await supabase
      .from("merchant_customizations")
      .select("*")
      .eq("merchant_id", merchantId)
      .single();

    if (error) {
      console.error("Error fetching merchant customization:", error);
      return null;
    }

    if (!data) return null;

    return toMerchantCustomizationModel(data as MerchantCustomization);
  } catch (error) {
    console.error("Error in getMerchantCustomization:", error);
    return null;
  }
}

/**
 * Updates a merchant's customization settings
 * @param merchantId The merchant ID
 * @param customization The customization settings to update
 * @returns Whether the update was successful
 */
export async function updateMerchantCustomization(
  merchantId: string,
  customization: Partial<MerchantCustomizationModel>
): Promise<boolean> {
  try {
    // Format the data for Supabase (convert camelCase to snake_case using our utility)
    const formattedCustomization: Partial<MerchantCustomization> = {};
    
    if ('logoUrl' in customization) formattedCustomization.logo_url = customization.logoUrl;
    if ('themeColor' in customization) formattedCustomization.theme_color = customization.themeColor;
    if ('emailTemplate' in customization) formattedCustomization.email_template = customization.emailTemplate;
    if ('customDomain' in customization) formattedCustomization.custom_domain = customization.customDomain;

    const { error } = await supabase
      .from("merchant_customizations")
      .update(formattedCustomization)
      .eq("merchant_id", merchantId);

    if (error) {
      console.error("Error updating merchant customization:", error);
      return false;
    }

    return true;
  } catch (error) {
    console.error("Error in updateMerchantCustomization:", error);
    return false;
  }
}

/**
 * Creates customization settings for a merchant
 * @param merchantId The merchant ID
 * @param customization The customization settings to create
 * @returns Whether the creation was successful
 */
export async function createMerchantCustomization(
  merchantId: string,
  customization: Partial<MerchantCustomizationModel> = {}
): Promise<boolean> {
  try {
    // Create the base object with the required merchant_id field
    const formattedCustomization: MerchantCustomization = {
      id: '', // Will be generated by Supabase
      merchant_id: merchantId,
      created_at: '', // Will be set by Supabase
      updated_at: '', // Will be set by Supabase
    };
    
    // Add optional fields if they exist
    if ('logoUrl' in customization) formattedCustomization.logo_url = customization.logoUrl;
    if ('themeColor' in customization) formattedCustomization.theme_color = customization.themeColor;
    if ('emailTemplate' in customization) formattedCustomization.email_template = customization.emailTemplate;
    if ('customDomain' in customization) formattedCustomization.custom_domain = customization.customDomain;

    const { error } = await supabase
      .from("merchant_customizations")
      .insert(formattedCustomization);

    if (error) {
      console.error("Error creating merchant customization:", error);
      return false;
    }

    return true;
  } catch (error) {
    console.error("Error in createMerchantCustomization:", error);
    return false;
  }
}
